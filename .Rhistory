sac_treecover = sac_treecover %>% select(ZonalSt_SacFN_N5_COUNT) %>% st_set_crs(3780) %>% st_transform(4326)
#sac_riverdist only needs its geometry and the mean distance to major rivers from any given cell
sac_riverdist = sac_riverdist %>% select(ZonalSt_SacFN_N1.MEAN) %>% st_set_crs(3780) %>% st_transform(4326)
# Once in a single dataframe, discard OIDs and rename variables
##All Calgary
allCalgary = st_join(cal_dem, cal_streamdist, largest = TRUE) %>%
st_join(cal_inundation, largest = TRUE) %>%
st_join(cal_residcover, largest = TRUE) %>%
st_join(cal_treecover, largest = TRUE) %>%
st_join(cal_commecover, largest = TRUE) %>%
st_join(cal_induscover, largest = TRUE)
allCalgary = allCalgary %>% rename(meanElevation = ZonalSt_Fishnet1.MEAN,
meanStreamDistance = dist2streams.MEAN,
inundation = calgary_inundation.MAJORITY,
residcover = ZonalSt_Calgary1_MAJORITY,
commecover = ZonalSt_Calgary3_MAJORITY,
induscover = ZonalSt_Calgary4_MAJORITY,
treecover = ZonalSt_Calgary6_COUNT)
allSacramento = st_join(sac_dem, sac_streamdist, largest = TRUE) %>%
st_join(sac_residcover, largest = TRUE) %>%
st_join(sac_treecover, largest = TRUE) %>%
st_join(sac_commecover, largest = TRUE) %>%
st_join(sac_induscover, largest = TRUE)
allSacramento = allSacramento %>% rename(meanElevation = demFilledSAC.MEAN,
meanStreamDistance = dist2streamsSAC.MEAN,
residcover = ZonalSt_SacFN_N7_MAJORITY,
commecover = ZonalSt_SacFN_N2_MAJORITY,
induscover = ZonalSt_SacFN_N4_MAJORITY,
treecover = ZonalSt_SacFN_N5_COUNT)
# Chunk 5: ggplot_inundation
ggplot() +
geom_sf(data=allCalgary, aes(fill=as.factor(inundation)), color=NA) +
labs(title="Inundation Areas", fill="Zone Type") +
scale_fill_manual(labels = c("Non-inundation zone", "Inundation zone"),
values = c("springgreen3","royalblue4")) +
mapTheme
# Chunk 6: ggplot_meanElevation
ggplot() +
geom_sf(data=allCalgary, aes(fill=as.numeric(meanElevation)), color=NA) +
scale_fill_viridis() +
labs(title="Mean Elevation (relative to lowest point)", fill="Elevation (m)") +
mapTheme
# Chunk 7: ggplot_meanStreamDistance
ggplot() +
geom_sf(data=allCalgary, aes(fill=as.numeric(meanStreamDistance)), color=NA) +
scale_fill_viridis() +
labs(title="Mean Distance to Nearest Stream", fill="Distance (m)") +
mapTheme
# Chunk 8: ggplot_residcover
ggplot() +
geom_sf(data=allCalgary, aes(fill=as.factor(residcover)), color=NA) +
labs(title="Residential Land Use", fill="Land Use Type") +
scale_fill_manual(labels = c("Non-Residential", "Residential"),
values = c("springgreen3","seagreen")) +
mapTheme
# Chunk 9: ggplot_commecover
ggplot() +
geom_sf(data=allCalgary, aes(fill=as.factor(commecover)), color=NA) +
labs(title="Commercial Land Use", fill="Land Use Type") +
scale_fill_manual(labels = c("Non-Commercial", "Commercial"),
values = c("springgreen3","turquoise1")) +
mapTheme
# Chunk 10: ggplot_induscover
ggplot() +
geom_sf(data=allCalgary, aes(fill=as.factor(induscover)), color=NA) +
labs(title="Industrial Land Use", fill="Land Use Type") +
scale_fill_manual(labels = c("Non-Industrial", "Industrial"),
values = c("springgreen3","yellow3")) +
mapTheme
# Chunk 11: training_set
# Randomly separate data into 70% training set, 30% test set
set.seed(3456)
trainIndex <- createDataPartition(allCalgary$inundation, p = .70,
list = FALSE,
times = 1)
allCalgaryTrain <- allCalgary[ trainIndex,]
allCalgaryTest  <- allCalgary[-trainIndex,]
# Chunk 12: create_model
# Convert to regular dataframe, R cannot run a regression on an sf
inundationModel <- glm(inundation ~ .,
family="binomial"(link="logit"), data = allCalgaryTrain %>%
as.data.frame() %>%
select(-geometry))
# Chunk 13: logistc_metrics
# Get summary statistics for the inundationModel
summary(inundationModel)
# Chunk 14: predict_calgary_test
# Get the results of the model on the Test set, create a histogram of the probability
# The parameter type="response" ensures that the probabilities range from 0 to 1.
inundationTrainProb <- predict(inundationModel, allCalgaryTest, type="response")
hist(inundationTrainProb,
main = "Frequency of Inundation Likelihood Levels",
xlab = "Probability of being in an inundation zone",
ylab = "Number of cells with the specified inundation zone probability")
# Chunk 15: plot_preds
inundationTestProb <- data.frame(obs = as.numeric(allCalgaryTest$inundation),
pred = inundationTrainProb)
ggplot(inundationTestProb, aes(x = pred, fill=as.factor(obs))) +
geom_density() +
facet_grid(obs ~ .) +
xlab("Probability") +
geom_vline(xintercept = .5) +
scale_fill_manual(values = c("springgreen3", "royalblue4"),
labels = c("No inundation zone predicted","Inundation zone predicted"),
name = "") +
labs(title="Test set: predicted probabilities by actual inundation zone status") +
plotTheme
# Chunk 16: confusion_matrix
inundationTestProb$predClass  = ifelse(inundationTestProb$pred > .15 ,1,0)
caret::confusionMatrix(reference = as.factor(inundationTestProb$obs),
data = as.factor(inundationTestProb$predClass),
positive = "1")
# Chunk 17: roc_curve
ggplot(inundationTestProb, aes(d = obs, m = pred)) +
geom_roc(n.cuts = 50, labels = FALSE) +
style_roc(theme = theme_grey) +
geom_abline(slope = 1, intercept = 0, size = 1.5, color = 'grey') +
plotTheme
# Chunk 18: auc
auc(inundationTestProb$obs, inundationTestProb$pred)
# Chunk 19: k_fold
ctrl <- caret::trainControl(method = "cv",
number = 100,
savePredictions = TRUE)
cvFit <- caret::train(as.factor(inundation) ~ .,
data = allCalgaryTrain %>%
as.data.frame() %>%
select(-geometry),
method="glm",
family="binomial",
trControl = ctrl)
summary(cvFit$resample$Accuracy)
# Chunk 20: spatial_CV
library(mlr)
# https://www.r-bloggers.com/2018/07/visualization-of-spatial-cross-validation-partitioning/
# https://geocompr.robinlovelace.net/spatial-cv.html
# create a resampling description with parameters on how we will resample our data for the cross validation.
factorized_training = st_drop_geometry(allCalgaryTrain)
factorized_training$treecover[is.na(factorized_training$treecover)] <- 0
factorized_training$inundation = as.factor(factorized_training$inundation)
calgaryTrainingTask = makeClassifTask(data = factorized_training,
target = "inundation",
coordinates = as.data.frame(st_coordinates(st_centroid(allCalgaryTrain)))
)
lrn = makeLearner(cl = "classif.binomial",
link = "logit",
predict.type = "prob",
fix.factors.prediction = TRUE)
perf_level = makeResampleDesc(method = "SpRepCV", folds = 5, reps = 100)
set.seed(012348)
sp_cv = mlr::resample(learner = lrn, task = calgaryTrainingTask,
resampling = perf_level,
measures = mlr::acc)
summary(sp_cv$measures.test$acc)
# Chunk 21: confusion_mapped
# Combine the Calgary training and test sets, including associated predictions
inundationAllProb <- add_predictions(allCalgary, inundationModel, type="response")
inundationAllProb$confusion = "true negative"
inundationAllProb <- transform(inundationAllProb, confusion = ifelse(pred >= 0.15 &
inundation == 1,
"true positive",
confusion))
inundationAllProb <- transform(inundationAllProb, confusion = ifelse(pred >= 0.15 &
inundation == 0,
"false positive",
confusion))
inundationAllProb <- transform(inundationAllProb, confusion = ifelse(pred < 0.15 &
inundation == 1,
"false negative",
confusion))
ggplot() +
geom_sf(data=inundationAllProb, aes(fill=confusion), color=NA) +
labs(title="Confusion Matrix by Cell", fill="Category") +
mapTheme
# Chunk 22: full_cal_prediciton
ggplot() +
geom_sf(data=inundationAllProb, aes(fill=as.numeric(pred)), color=NA) +
scale_fill_viridis() +
labs(title="Full Prediction Set for Calgary Inundation", fill="Prediction") +
mapTheme
# Chunk 23: full_sac_prediciton
inundationAllSacProb <- add_predictions(allSacramento, inundationModel, type="response")
ggplot() +
geom_sf(data=inundationAllSacProb, aes(fill=as.numeric(pred)), color=NA) +
scale_fill_viridis() +
labs(title="Full Prediction Set for Calgary Inundation", fill="Prediction") +
mapTheme
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
sf::sf_use_s2(FALSE)
options(scipen=999)
library(caret)
library(pscl)
library(plotROC)
library(pROC)
library(sf)
library(tidyverse)
library(knitr)
library(kableExtra)
library(tigris)
library(viridis)
library(terra)
library(cowplot)
library(modelr)
# Chunk 2: mapTheme
mapTheme <- theme(plot.title =element_text(size=12),
plot.subtitle = element_text(size=8),
plot.caption = element_text(size = 6),
axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_line(colour = 'transparent'),
panel.grid.minor=element_blank(),
legend.direction = "vertical",
legend.position = "right",
plot.margin = margin(1, 1, 1, 1, 'cm'),
legend.key.height = unit(1, "cm"), legend.key.width = unit(0.2, "cm"))
plotTheme <- theme(
plot.title =element_text(size=12),
plot.subtitle = element_text(size=8),
plot.caption = element_text(size = 6),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
axis.text.y = element_text(size = 10),
axis.title.y = element_text(size = 10),
# Set the entire chart region to blank
panel.background=element_blank(),
plot.background=element_blank(),
#panel.border=element_rect(colour="#F0F0F0"),
# Format the grid
panel.grid.major=element_line(colour="#D0D0D0",size=.75),
axis.ticks=element_blank())
# Chunk 3: load_json
cal_dem <- st_read("https://raw.githubusercontent.com/Willfriedrichs/Midterm_Repo/main/Finalized_Layers/Cal_dem_filled.json", quiet = TRUE)
cal_streamdist <- st_read("https://raw.githubusercontent.com/Willfriedrichs/Midterm_Repo/main/Finalized_Layers/cal_dist2streams.json", quiet = TRUE)
cal_inundation <- st_read("https://raw.githubusercontent.com/Willfriedrichs/Midterm_Repo/main/Finalized_Layers/calgary_inundation.json", quiet = TRUE)
cal_inundation[is.na(cal_inundation)] = 0
sac_dem <- st_read("https://raw.githubusercontent.com/Willfriedrichs/Midterm_Repo/main/Finalized_Layers/sac_dem_filled.geojson", quiet = TRUE)
sac_streamdist <- st_read("https://raw.githubusercontent.com/Willfriedrichs/Midterm_Repo/main/Finalized_Layers/sac_dist2streams.geojson", quiet = TRUE)
##Sacramento & Calgary Distance to Major Rivers Variables
sac_riverdist <- st_read("https://raw.githubusercontent.com/Willfriedrichs/Midterm_Repo/main/Finalized_Layers/SacramentoRiverDistance.json", quiet = TRUE)
cal_riverdist <- st_read("https://raw.githubusercontent.com/Willfriedrichs/Midterm_Repo/main/Finalized_Layers/CalgaryRiverDistance.json", quiet = TRUE)
##Sacramento & Calgary Land Use Variables
sac_residcover <- st_read("https://raw.githubusercontent.com/Willfriedrichs/Midterm_Repo/main/Finalized_Layers/SacFN_New_Resi_UPDATED.json", quiet = TRUE) ##Residential land Use
sac_mixedcover <- st_read("https://raw.githubusercontent.com/Willfriedrichs/Midterm_Repo/main/Finalized_Layers/SacFN_New_mixed_filled.geojson", quiet = TRUE) ## Mixed Use/ Transit Orientated Development Land Use
sac_commecover <- st_read("https://raw.githubusercontent.com/Willfriedrichs/Midterm_Repo/main/Finalized_Layers/SacFN_New_mixed_filled.geojson", quiet = TRUE) ## Commercial Land Use
sac_induscover <- st_read("https://raw.githubusercontent.com/Willfriedrichs/Midterm_Repo/main/Finalized_Layers/SacFN_New_industrial_filled.geojson", quiet = TRUE) ##Industrial Land Use
sac_agricover <- st_read("https://raw.githubusercontent.com/Willfriedrichs/Midterm_Repo/main/Finalized_Layers/SacFN_New_argric_filled.geojson", quiet = TRUE) ## Agricultural & Open Space Land Use
## Calgary Land Use
cal_residcover <- st_read("https://raw.githubusercontent.com/Willfriedrichs/Midterm_Repo/main/Finalized_Layers/CalgaryFishnet_resid.json", quiet = TRUE)  ##Residential land Use
cal_mixedcover <- st_read("https://raw.githubusercontent.com/Willfriedrichs/Midterm_Repo/main/Finalized_Layers/CalgaryFishnet_mixed.json", quiet = TRUE) ## Mixed Use/ Transit Orientated Development Land Use
cal_commecover <- st_read("https://raw.githubusercontent.com/Willfriedrichs/Midterm_Repo/main/Finalized_Layers/CalgaryFishnet_commer.json", quiet = TRUE) ## Commercial Land Use
cal_induscover <- st_read("https://raw.githubusercontent.com/Willfriedrichs/Midterm_Repo/main/Finalized_Layers/CalgaryFishnet_industr.json", quiet = TRUE) ##Industrial Land Use
cal_agricover <- st_read("https://raw.githubusercontent.com/Willfriedrichs/Midterm_Repo/main/Finalized_Layers/CalgaryFishnet_agric.json", quiet = TRUE) ## Agricultural & Open Space Land Use
## Tree Cover
cal_treecover <- st_read("https://raw.githubusercontent.com/Willfriedrichs/Midterm_Repo/main/Finalized_Layers/CalgaryFishnet_TreeCover__.json", quiet = TRUE)
sac_treecover <- st_read("https://raw.githubusercontent.com/Willfriedrichs/Midterm_Repo/main/Finalized_Layers/SacFN_New_TreeCover.json", quiet = TRUE)
# Chunk 4: load_chesco
##Calgary Model
# cal_dem only needs its geometry and information as to the mean elevation of each cell.
# mean elevation will be re-evaluated relative to minimum non-zero fishnet cell
cal_dem = cal_dem %>% select(ZonalSt_Fishnet1.MEAN)
min_nonzero_cell = min(cal_dem$ZonalSt_Fishnet1.MEAN)
cal_dem$ZonalSt_Fishnet1.MEAN = cal_dem$ZonalSt_Fishnet1.MEAN - min_nonzero_cell
#cal_streamdist only needs its geometry and the mean distance to stream from any given cell.
cal_streamdist = cal_streamdist %>% select(dist2streams.MEAN)
#cal_inundation only needs its geometry and the majority inundation for cells
cal_inundation = cal_inundation %>% select(calgary_inundation.MAJORITY)
#cal_residcover only needs its geometry and the majority of the areas pertaining to residential land use for cells
cal_residcover = cal_residcover %>% select(ZonalSt_Calgary1_MAJORITY) %>% st_set_crs(4326) %>% st_transform(4326)
#cal_mixedcover only needs its geometry and the majority of the areas pertaining to mixed Use or transit orientated development land use for cells
cal_mixedcover = cal_mixedcover %>% select(ZonalSt_Calgary2_MAJORITY) %>% st_set_crs(4326) %>% st_transform(4326)
#cal_commecover only needs its geometry and the majority of the areas pertaining to  commercial land uses for cells
cal_commecover = cal_commecover %>% select(ZonalSt_Calgary3_MAJORITY) %>% st_set_crs(4326) %>% st_transform(4326)
#cal_induscover only needs its geometry and the majority of the areas pertaining to industrial land uses for cells
cal_induscover = cal_induscover %>% select(ZonalSt_Calgary4_MAJORITY) %>% st_set_crs(4326) %>% st_transform(4326)
#cal_agricover only needs its geometry and the majority of the areas pertaining to  agricultural & open space land uses for cells
cal_agricover = cal_agricover %>% select(ZonalSt_Calgary5_MAJORITY) %>% st_set_crs(4326) %>% st_transform(4326)
#cal_treecover only needs its geometry and the count of trees in the area for each cell
cal_treecover = cal_treecover %>% select(ZonalSt_Calgary6_COUNT) %>% st_set_crs(4326) %>% st_transform(4326)
cal_treecover[is.na(cal_treecover)] <- 0
#cal_riverdist only needs its geometry and the mean distance to major rivers from any given cell
cal_riverdist = cal_riverdist %>% select(LastTableCalgary.MEAN) %>% st_set_crs(4326) %>% st_transform(4326)
##Sacramento Model
# sac_dem only needs its geometry and information as to the mean elevation of each cell.
# since the minimum mean elevation is nonzero in Sacramento, no readjustment is necessary.
sac_dem = sac_dem %>% select(demFilledSAC.MEAN) %>% st_set_crs(3780) %>% st_transform(4326)
#sac_streamdist only needs its geometry and the mean distance to stream from any given cell.
sac_streamdist = sac_streamdist %>% select(dist2streamsSAC.MEAN) %>% st_set_crs(3780) %>% st_transform(4326)
#sac_residcover only needs its geometry and the majority of the areas pertaining to residential land use for cells
sac_residcover = sac_residcover %>% select(ZonalSt_SacFN_N7_MAJORITY) %>% st_set_crs(3780) %>% st_transform(4326)
#sac_mixedcover only needs its geometry and the majority of the areas pertaining to mixed Use or transit orientated development land use for cells
sac_mixedcover = sac_mixedcover %>% select(ZonalSt_SacFN_N2_MAJORITY) %>% st_set_crs(3780) %>% st_transform(4326)
#sac_commecover only needs its geometry and the majority of the areas pertaining to  commercial land uses for cells
sac_commecover = sac_commecover %>% select(ZonalSt_SacFN_N2_MAJORITY) %>% st_set_crs(4326)
#sac_induscover only needs its geometry and the majority of the areas pertaining to industrial land uses for cells
sac_induscover = sac_induscover %>% select(ZonalSt_SacFN_N4_MAJORITY) %>% st_set_crs(4326)
#sac_agricover only needs its geometry and the majority of the areas pertaining to  agricultural & open space land uses for cells
sac_agricover = sac_agricover %>% select(ZonalSt_SacFN_N5.MAJORITY) %>% st_set_crs(3780) %>% st_transform(4326)
#sac_treecover only needs its geometry and the count of trees in the area for each cell
sac_treecover = sac_treecover %>% select(ZonalSt_SacFN_N5_COUNT) %>% st_set_crs(3780) %>% st_transform(4326)
#sac_riverdist only needs its geometry and the mean distance to major rivers from any given cell
sac_riverdist = sac_riverdist %>% select(ZonalSt_SacFN_N1.MEAN) %>% st_set_crs(3780) %>% st_transform(4326)
# Once in a single dataframe, discard OIDs and rename variables
##All Calgary
allCalgary = st_join(cal_dem, cal_streamdist, largest = TRUE) %>%
st_join(cal_inundation, largest = TRUE) %>%
st_join(cal_residcover, largest = TRUE) %>%
st_join(cal_treecover, largest = TRUE) %>%
st_join(cal_commecover, largest = TRUE) %>%
st_join(cal_induscover, largest = TRUE)
allCalgary = allCalgary %>% rename(meanElevation = ZonalSt_Fishnet1.MEAN,
meanStreamDistance = dist2streams.MEAN,
inundation = calgary_inundation.MAJORITY,
residcover = ZonalSt_Calgary1_MAJORITY,
commecover = ZonalSt_Calgary3_MAJORITY,
induscover = ZonalSt_Calgary4_MAJORITY,
treecover = ZonalSt_Calgary6_COUNT)
allSacramento = st_join(sac_dem, sac_streamdist, largest = TRUE) %>%
st_join(sac_residcover, largest = TRUE) %>%
st_join(sac_treecover, largest = TRUE) %>%
st_join(sac_commecover, largest = TRUE) %>%
st_join(sac_induscover, largest = TRUE)
allSacramento = allSacramento %>% rename(meanElevation = demFilledSAC.MEAN,
meanStreamDistance = dist2streamsSAC.MEAN,
residcover = ZonalSt_SacFN_N7_MAJORITY,
commecover = ZonalSt_SacFN_N2_MAJORITY,
induscover = ZonalSt_SacFN_N4_MAJORITY,
treecover = ZonalSt_SacFN_N5_COUNT)
# Chunk 5: ggplot_inundation
ggplot() +
geom_sf(data=allCalgary, aes(fill=as.factor(inundation)), color=NA) +
labs(title="Inundation Areas", fill="Zone Type") +
scale_fill_manual(labels = c("Non-inundation zone", "Inundation zone"),
values = c("springgreen3","royalblue4")) +
mapTheme
# Chunk 6: ggplot_meanElevation
ggplot() +
geom_sf(data=allCalgary, aes(fill=as.numeric(meanElevation)), color=NA) +
scale_fill_viridis() +
labs(title="Mean Elevation (relative to lowest point)", fill="Elevation (m)") +
mapTheme
# Chunk 7: ggplot_meanStreamDistance
ggplot() +
geom_sf(data=allCalgary, aes(fill=as.numeric(meanStreamDistance)), color=NA) +
scale_fill_viridis() +
labs(title="Mean Distance to Nearest Stream", fill="Distance (m)") +
mapTheme
# Chunk 8: ggplot_residcover
ggplot() +
geom_sf(data=allCalgary, aes(fill=as.factor(residcover)), color=NA) +
labs(title="Residential Land Use", fill="Land Use Type") +
scale_fill_manual(labels = c("Non-Residential", "Residential"),
values = c("springgreen3","seagreen")) +
mapTheme
# Chunk 9: ggplot_commecover
ggplot() +
geom_sf(data=allCalgary, aes(fill=as.factor(commecover)), color=NA) +
labs(title="Commercial Land Use", fill="Land Use Type") +
scale_fill_manual(labels = c("Non-Commercial", "Commercial"),
values = c("springgreen3","turquoise1")) +
mapTheme
# Chunk 10: ggplot_induscover
ggplot() +
geom_sf(data=allCalgary, aes(fill=as.factor(induscover)), color=NA) +
labs(title="Industrial Land Use", fill="Land Use Type") +
scale_fill_manual(labels = c("Non-Industrial", "Industrial"),
values = c("springgreen3","yellow3")) +
mapTheme
# Chunk 11: training_set
# Randomly separate data into 70% training set, 30% test set
set.seed(3456)
trainIndex <- createDataPartition(allCalgary$inundation, p = .70,
list = FALSE,
times = 1)
allCalgaryTrain <- allCalgary[ trainIndex,]
allCalgaryTest  <- allCalgary[-trainIndex,]
# Chunk 12: create_model
# Convert to regular dataframe, R cannot run a regression on an sf
inundationModel <- glm(inundation ~ .,
family="binomial"(link="logit"), data = allCalgaryTrain %>%
as.data.frame() %>%
select(-geometry))
# Chunk 13: logistc_metrics
# Get summary statistics for the inundationModel
summary(inundationModel)
# Chunk 14: predict_calgary_test
# Get the results of the model on the Test set, create a histogram of the probability
# The parameter type="response" ensures that the probabilities range from 0 to 1.
inundationTrainProb <- predict(inundationModel, allCalgaryTest, type="response")
hist(inundationTrainProb,
main = "Frequency of Inundation Likelihood Levels",
xlab = "Probability of being in an inundation zone",
ylab = "Number of cells with the specified inundation zone probability")
# Chunk 15: plot_preds
inundationTestProb <- data.frame(obs = as.numeric(allCalgaryTest$inundation),
pred = inundationTrainProb)
ggplot(inundationTestProb, aes(x = pred, fill=as.factor(obs))) +
geom_density() +
facet_grid(obs ~ .) +
xlab("Probability") +
geom_vline(xintercept = .5) +
scale_fill_manual(values = c("springgreen3", "royalblue4"),
labels = c("No inundation zone predicted","Inundation zone predicted"),
name = "") +
labs(title="Test set: predicted probabilities by actual inundation zone status") +
plotTheme
# Chunk 16: confusion_matrix
inundationTestProb$predClass  = ifelse(inundationTestProb$pred > .15 ,1,0)
caret::confusionMatrix(reference = as.factor(inundationTestProb$obs),
data = as.factor(inundationTestProb$predClass),
positive = "1")
# Chunk 17: roc_curve
ggplot(inundationTestProb, aes(d = obs, m = pred)) +
geom_roc(n.cuts = 50, labels = FALSE) +
style_roc(theme = theme_grey) +
geom_abline(slope = 1, intercept = 0, size = 1.5, color = 'grey') +
plotTheme
# Chunk 18: auc
auc(inundationTestProb$obs, inundationTestProb$pred)
# Chunk 19: k_fold
ctrl <- caret::trainControl(method = "cv",
number = 100,
savePredictions = TRUE)
cvFit <- caret::train(as.factor(inundation) ~ .,
data = allCalgaryTrain %>%
as.data.frame() %>%
select(-geometry),
method="glm",
family="binomial",
trControl = ctrl)
summary(cvFit$resample$Accuracy)
# Chunk 20: spatial_CV
library(mlr)
# https://www.r-bloggers.com/2018/07/visualization-of-spatial-cross-validation-partitioning/
# https://geocompr.robinlovelace.net/spatial-cv.html
# create a resampling description with parameters on how we will resample our data for the cross validation.
factorized_training = st_drop_geometry(allCalgaryTrain)
factorized_training$treecover[is.na(factorized_training$treecover)] <- 0
factorized_training$inundation = as.factor(factorized_training$inundation)
calgaryTrainingTask = makeClassifTask(data = factorized_training,
target = "inundation",
coordinates = as.data.frame(st_coordinates(st_centroid(allCalgaryTrain)))
)
lrn = makeLearner(cl = "classif.binomial",
link = "logit",
predict.type = "prob",
fix.factors.prediction = TRUE)
perf_level = makeResampleDesc(method = "SpRepCV", folds = 5, reps = 100)
set.seed(012348)
sp_cv = mlr::resample(learner = lrn, task = calgaryTrainingTask,
resampling = perf_level,
measures = mlr::acc)
summary(sp_cv$measures.test$acc)
# Chunk 21: confusion_mapped
# Combine the Calgary training and test sets, including associated predictions
inundationAllProb <- add_predictions(allCalgary, inundationModel, type="response")
inundationAllProb$confusion = "true negative"
inundationAllProb <- transform(inundationAllProb, confusion = ifelse(pred >= 0.15 &
inundation == 1,
"true positive",
confusion))
inundationAllProb <- transform(inundationAllProb, confusion = ifelse(pred >= 0.15 &
inundation == 0,
"false positive",
confusion))
inundationAllProb <- transform(inundationAllProb, confusion = ifelse(pred < 0.15 &
inundation == 1,
"false negative",
confusion))
ggplot() +
geom_sf(data=inundationAllProb, aes(fill=confusion), color=NA) +
labs(title="Confusion Matrix by Cell", fill="Category") +
mapTheme
# Chunk 22: full_cal_prediciton
ggplot() +
geom_sf(data=inundationAllProb, aes(fill=as.numeric(pred)), color=NA) +
scale_fill_viridis() +
labs(title="Full Prediction Set for Calgary Inundation", fill="Prediction") +
mapTheme
# Chunk 23: full_sac_prediciton
inundationAllSacProb <- add_predictions(allSacramento, inundationModel, type="response")
ggplot() +
geom_sf(data=inundationAllSacProb, aes(fill=as.numeric(pred)), color=NA) +
scale_fill_viridis() +
labs(title="Full Prediction Set for Calgary Inundation", fill="Prediction") +
mapTheme
ccadfoakp[FOJPASD[GK]A]
GASDG
AS
GS
DG
SADG
AS
DG
ASDGAS
DGASDG
ASDGA
W';,EF'
:we"bfrWEFQE';AGWE"
fqwqe'gfa'
QWF'AS'
w'fasQ'
EG'D'
ERqe'dh'
eqrwe
we';h'w
eqrwe
